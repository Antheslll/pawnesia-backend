// controllers/ — Tempat logika fungsi yang menangani request dari route.

// routes/ — Tempat definisi endpoint REST API, misal GET/POST /users.

// models/ — Struktur data / schema database (misal MongoDB, Sequelize).

// middlewares/ — Middleware Express seperti auth, logging, error handler.

// services/ — Tempat logika bisnis yang lebih kompleks, dipanggil controller.

// utils/ — Fungsi pendukung umum (format tanggal, logger, dll).

// config/ — Konfigurasi koneksi database, konfigurasi lainnya.

// app.js — Inisialisasi express, middleware, dan route.

// server.js — Menjalankan server di port tertentu.




Client --> Route --> Middleware(s) --> Controller --> Service --> Database
                                            |
                                         Response


jadi intinya itu middlewares kyk yang untuk ngebantu si controllers/ middlewares itu kyk helper bisa dipakai dimana aja, misal untuk ngedecode dan kasih json webtoken dll


Rate Limiting: Tambahkan middleware express-rate-limit untuk endpoint login.

Helmet: Gunakan helmet() untuk menambah layer keamanan HTTP headers.

Logging: Gunakan morgan atau logger custom agar request bisa dilacak.

Error Handler Global: Buat middleware errorHandler di akhir untuk tangani unhandled errors.